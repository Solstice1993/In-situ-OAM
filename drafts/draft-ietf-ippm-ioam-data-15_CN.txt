



  IPPM F. Brockners，Ed.Internet-Srime
Ciscoineed状态：标准曲目S. Bhandari，Ed.Expires：
4月6日，2022年4月2022名思想家T.
Mizrahi，ED。华为10月3日，2021年

  用于入场OAM的数据字段-IETF-IPPM-IOAM-DATA-15

  抽象的

  原位操作，管理和维护（IOAM）在数据包中记录在数据包中的运行和遥测信息，而
数据包遍历网络中的路径。本文档讨论了原位OAM的数据字段和关联数据类型。原位OA
M数据字段可以封装到各种协议中，例如NSH，段路由，Geneve或IPv6。原位
OAM可用于基于例如ICMP或其他类型的探针包来补充OAM机制。

  这个备忘录的地位

  此互联网草案与BCP 78和BCP 79的规定完全一致。

  互联网草稿是互联网工程工作组（IETF）的工作文件。请注意，其他组还可以将工
作文件分发给互联网草稿。当前的Internet-草稿列表是https://dat
atracker.ietf.org/drafts/current/。

  互联网草案均缴纳最多六个月的文件草案，并可以随时更新，更换或已被其他文件替换
或过时。使用互联网草稿作为参考资料是不合适的，或者以“正在进行的工作”。

  此互联网草案将于4月6日至2022年4月6日期。

  版权声明

  版权所有（c）2021 IETF信托和被确定为文件作者的人。版权所有。

  本文件须遵守BCP 78和IETF Trust与IETF文件（HTTPS:/
/trustee.ietf.org/LICENSE-INFO）的法律规定有效期



Brockners, et al.         Expires April 6, 2022                 [Page 1]

Internet-Draft           In-situ OAM Data Fields            October 2021

  发布本文件。请仔细审查这些文件，因为它们描述了对本文件的权利和限制。从本文档
中提取的代码组件必须包括简化的BSD许可证文本，如信托法律规定第4.在第41条中
所述，并且在没有简化的BSD许可证中所述没有保修提供。

  目录

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   3
   2.  Contributors  . . . . . . . . . . . . . . . . . . . . . . . .   3
   3.  Conventions . . . . . . . . . . . . . . . . . . . . . . . . .   4
   4.  Scope, Applicability, and Assumptions . . . . . . . . . . . .   5
   5.  IOAM Data-Fields, Types, Nodes  . . . . . . . . . . . . . . .   6
     5.1.  IOAM Data-Fields and Option-Types . . . . . . . . . . . .   7
     5.2.  IOAM-Domains and types of IOAM Nodes  . . . . . . . . . .   7
     5.3.  IOAM-Namespaces . . . . . . . . . . . . . . . . . . . . .   9
     5.4.  IOAM Trace Option-Types . . . . . . . . . . . . . . . . .  11
       5.4.1.  Pre-allocated and Incremental Trace Option-Types  . .  13
       5.4.2.  IOAM node data fields and associated formats  . . . .  18
         5.4.2.1.  Hop_Lim and node_id short format  . . . . . . . .  18
         5.4.2.2.  ingress_if_id and egress_if_id  . . . . . . . . .  19
         5.4.2.3.  timestamp seconds . . . . . . . . . . . . . . . .  19
         5.4.2.4.  timestamp fraction  . . . . . . . . . . . . . . .  20
         5.4.2.5.  transit delay . . . . . . . . . . . . . . . . . .  20
         5.4.2.6.  namespace specific data . . . . . . . . . . . . .  20
         5.4.2.7.  queue depth . . . . . . . . . . . . . . . . . . .  21
         5.4.2.8.  Checksum Complement . . . . . . . . . . . . . . .  21
         5.4.2.9.  Hop_Lim and node_id wide  . . . . . . . . . . . .  22
         5.4.2.10. ingress_if_id and egress_if_id wide . . . . . . .  22
         5.4.2.11. namespace specific data wide  . . . . . . . . . .  22
         5.4.2.12. buffer occupancy  . . . . . . . . . . . . . . . .  23
         5.4.2.13. Opaque State Snapshot . . . . . . . . . . . . . .  23
       5.4.3.  Examples of IOAM node data  . . . . . . . . . . . . .  24
     5.5.  IOAM Proof of Transit Option-Type . . . . . . . . . . . .  26
       5.5.1.  IOAM Proof of Transit Type 0  . . . . . . . . . . . .  28
     5.6.  IOAM Edge-to-Edge Option-Type . . . . . . . . . . . . . .  29
   6.  Timestamp Formats . . . . . . . . . . . . . . . . . . . . . .  31
     6.1.  PTP Truncated Timestamp Format  . . . . . . . . . . . . .  31
     6.2.  NTP 64-bit Timestamp Format . . . . . . . . . . . . . . .  32
     6.3.  POSIX-based Timestamp Format  . . . . . . . . . . . . . .  34
   7.  IOAM Data Export  . . . . . . . . . . . . . . . . . . . . . .  35
   8.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  35
     8.1.  IOAM Option-Type Registry . . . . . . . . . . . . . . . .  36
     8.2.  IOAM Trace-Type Registry  . . . . . . . . . . . . . . . .  36
     8.3.  IOAM Trace-Flags Registry . . . . . . . . . . . . . . . .  37
     8.4.  IOAM POT-Type Registry  . . . . . . . . . . . . . . . . .  38
     8.5.  IOAM POT-Flags Registry . . . . . . . . . . . . . . . . .  38



Brockners, et al.         Expires April 6, 2022                 [Page 2]

Internet-Draft           In-situ OAM Data Fields            October 2021


     8.6.  IOAM E2E-Type Registry  . . . . . . . . . . . . . . . . .  39
     8.7.  IOAM Namespace-ID Registry  . . . . . . . . . . . . . . .  39
   9.  Management and Deployment Considerations  . . . . . . . . . .  40
   10. Security Considerations . . . . . . . . . . . . . . . . . . .  41
   11. Acknowledgements  . . . . . . . . . . . . . . . . . . . . . .  43
   12. References  . . . . . . . . . . . . . . . . . . . . . . . . .  43
     12.1.  Normative References . . . . . . . . . . . . . . . . . .  43
     12.2.  Informative References . . . . . . . . . . . . . . . . .  44
   Contributors' Addresses . . . . . . . . . . . . . . . . . . . . .  45
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  47

1.介绍

  本文档定义了“原位”操作，管理和维护（IOAM）的数据字段。原位OAM记录数
据包中的OAM信息，而数据包遍历特定网络域。术语“原位”是指OAM数据被添加到数
据包中，而不是在专门专用于OAM的数据包内发送。 IOam是补充诸如Ping或T
raceroute的机制。就“主动”或“被动”Oam而言，“原位”OAM可以被认
为是混合OAM类型。 “原位”机制不需要发送额外的数据包。 IOAM将信息添加到
已有的数据包中，因此不能被视为被动。就[RFC7799]中给出的分类而言，IOa
m可以被描绘为混合型I.可以利用IOAM机制，其中使用例如ICMP不适用或不提供
所需的结果，例如证明某种交通流程为数据流量进行预定义路径，对数据流量的SLA验证
，网络中的网络中的交通分布路径的详细统计数据，这些路径在多个路径上分布流量的流量
，或者通过网络设备不同地处理探测流量的场景。

  “原位OAM”术语最初是通过使用将信息添加到数据包中的OAM相关机制的激励。
本文档使用IOAM作为定义IOAM技术的术语。IOam包括“原位”机制，而且还可
以触发创建专用于OAM的附加数据包的机制。

2.贡献者

  本文件是若干作者的集体努力。文本和内容由编辑和下面列出的共同作者提供了贡献。
共同作者的联系信息在本文档的末尾出现。

  或卡洛斯帕甘罗..




Brockners, et al.         Expires April 6, 2022                 [Page 3]

Internet-Draft           In-situ OAM Data Fields            October 2021

  o米克镜子

  巴拉克GAF.

  o詹妮弗柠檬

  o Hannes Gratler.

  o John Lieddy.

  Steffen Hihell.

  关于David Mozes。

  关于Petr Lapukhov.

  remy张

  Daniel Verner.

3.惯例

  关键词“必须”，“必须”，“必填”，“应该”，“不得”，“应该”，“应该”，
“推荐”，“不推荐”，“可以”，和“可选“在本文档中将被解释为如BCP 14
[RFC2119]
[RFC8174]何时所述，并且仅当它们出现在所有资本中时，如此所示。

  本文档中使用的缩写和定义：

  E2E : 边缘到边缘

  Geneve : 通用网络虚拟化封装[RFC8926]

  IOAM : 原位运营，管理和维护

  MTU : 最大传输单元

  NSH : 网络服务标题[RFC8300]

  OAM : 运营，管理和维护

  PMTU : 路径。

  POT : 过境证明

  Short format :
“短格式”是指包含4个八位字节的IOAM数据字段。



Brockners, et al.         Expires April 6, 2022                 [Page 4]

Internet-Draft           In-situ OAM Data Fields            October 2021

  SID : 段识别

  SR : 段路由

  VXLAN-GPE : 虚拟可扩展局域网，通用协议扩展[i-d.ietf-
nvo3-vxlan-gpe]

  Wide format :
“宽格式”是指包含8个八位字节的IOAM数据字段。

4.范围，适用性和假设

  IOam假设一组约束以及指导原则和概念，与IOAM数据字段的定义一起携手共进
。本节中描述了这些约束，指导原则和概念。对IOAM数据字段和关联概念如何应用于I
OAM部署的讨论缺失了本文档的范围。有关IOAM部署注意事项，请参阅[i-d.b
rockers-opsawg-ioam-deployments]。

  Scope : 本文档定义了原位OAM的数据字段和关联数据类型。原位OAM数
据字段可以封装在各种协议中，包括NSH，段路由，Geneve和IPv6。这些不同
协议的规范详细信息超出了本文档的范围。预计每个此类封装将由RFC指定，由开发或维
护封装协议和IETF IPPM工作组的工作组联合设计。

  原位OAM部署的部署域（或范围）：IOam专注于[RFC8799]中定义的“
有限域”。对于IOAM，有限的域可以例如使用使用虚拟连接/隧道之间的设备或覆盖网
络之间的物理连接以进行连接，以便在所述设备之间连接。使用IOAM的有限域可以构成
一个或多个“IOAM域”，每个歧义通过单独的命名空间标识符歧义。
IOam域由其周边或边缘界定。 IOAM域可以在有限域内重叠。 IOAM协议封装
的设计者指定了确保IOAM数据在IOAM域中保持的机制。此外，预计这种域的操作员
将提出规定，以确保IOAM数据使用例如数据包过滤方法使用例如分组过滤方法不会超出
IOAM域的边缘。操作员应考虑IOam对诸如ECMP处理的机制的潜在操作影响（例
如，基于数据包长度的负载平衡方案可能因IOam而增加的数据包大小而受到影响），路
径MTU（即，确保MTU域中的所有链接是



Brockners, et al.         Expires April 6, 2022                 [Page 5]

Internet-Draft           In-situ OAM Data Fields            October 2021

  足够大以支持由于IOAM引起的增加的数据包大小）和ICMP消息处理（即，在I
Pv6的情况下，需要对ICMPv6回声请求/回复的IOAM支持，这将转换为ICM
Pv6扩展，以使能够复制的IOAM-Data-
ence从echo请求消息到回应回复消息）。

  IOAM control points : 通过构成域边缘的设备添加或从用户
流量添加或从用户流量中删除。形成IOAM域的设备可以添加，更新或删除IOAM-
数据字段。IOam-域的边缘设备可以是主机或网络设备。

  IOAM应用于IOAM的流量集：可以在用户流量的所有子集上部署IOAM。在所
选流量集中使用IOam（例如，每个接口基于定义特定流量集的访问控制列表或流程规范
等）可能在通过封装处理IOAM数据字段的部署中的部署中，运输或解封口节点可能是绩
效或操作角度的关注。因此，在某些部署中，限制了流量IOam的数量可能是有益的。

  Encapsulation independence : IOAM-
Data-Fields的定义与IOAM-Data-
endia封装到的协议。IOam-Data-
Fields可以封装到多个封装协议中。

  Layering : 如果若干封装协议（例如，在隧道的情况下）彼此顶部堆叠，
则可以在多个层处存在IOAM数据字段。该行为遵循夜间模型，即一层中的IOAM-
Data-excession独立于另一层中的IOAM数据字段。分层允许操作员仪器
仪器仪表他们想要测量的协议层。不同的层可以，但不必，共享相同的IOAM封装机制。

  IOAM implementation : IOAM-Data-
Fields的定义将具有硬件数据平面和软件数据平面的设备的细节考虑在内。

5. IOAM数据字段，类型，节点

  本节详细介绍了IOAM相关的命名法，并描述了数据类型，如IOAM-Data-
Fields，Ioam-types，Ioam-
命名空间以及不同类型的IOAM节点。






Brockners, et al.         Expires April 6, 2022                 [Page 6]

Internet-Draft           In-situ OAM Data Fields            October 2021

5.1。IOAM数据字段和选项类型

  IOAM-Data-Field是一组具有定义格式和含义的比特，其可以存储在数
据包中的某个位置以用于IOAM的目的。

  为了适应IOAM的不同用途，IOAM-Data-
Fields属于不同的类别。在IOAM中，这些类别被称为IOAM-
选项类型。为IOAM-Option-inse维护一个通用的注册表，有关详细信息，
请参阅第8.1节。对应于这些IOam-选项类型，定义了不同的IOAM-Data-
Fields。

  本文档定义了四种IOAM-选项类型：

  o预先分配的跟踪选项类型

  o增量跟踪选项类型

  o运输途径（锅）选项类型

  o边缘到边缘（E2E）选项类型

  未来的IOAM-OPTION-
CNAICE可以由IANA分配，如第8.1节所述。

5.2。IOAM-域和IOAM节点的类型

  预计IOam将部署在特定域中。使用IOAM的网络的一部分被称为“IOAM-域
”。在进入IOAM域时，将一个或多个IOam-Option-
type添加到数据包中，并在退出域时从数据包中删除。在IOAM-
域中，可以通过数据包遍历的网络节点更新IOAM-DATA-
FIELDS。IOam-Domain由“IOAM封装节点”，“IOAM
Depapsulate节点”和“IOam
Transit节点”组成。节点（即，封装，传输，解除）的角色在IOam-
命名空间中定义（见下文）。一个节点可以在不同的IOAM-
命名空间中具有不同的角色。

  将至少一个IOAM-Option-
Type的设备称为分组的设备称为“IOAM封装节点”，而移除IOam-
Option-Type的设备被称为“IOAM解封槽”。域内的节点，了解IOAM数
据和读取和/或写入和/或进程IOAM数据称为“IOam
Transit节点”。添加或删除IOAM-Data-
Fields的IOAM节点也可以同时更新IOAM-Data-excess。或者换
句话说，IOAM封装或解封装的节点也可以同时用作IOAM传输节点。请注意，IOA
M域中的每个节点都不需要是IOAM Transit节点。例如，部署可能



Brockners, et al.         Expires April 6, 2022                 [Page 7]

Internet-Draft           In-situ OAM Data Fields            October 2021

  要求数据包遍历一组支持IOAM的防火墙。在这种情况下，只有该组防火墙节点将是
IOAM传输节点而不是所有节点。

  “IOAM封装节点”包含一个或多个IOam-option-types（从IO
am类型列表，请参阅第8.1节）进入启用IOAM的数据包中。如果为流量的所选子集
启用IOAM，则IOAM封装节点负责将IOAM功能应用于所选子集。

  “IOam Transit节点”读取和/或写入和/或处理一个或多个IOAM数
据字段。如果分组中的预先分配和增量跟踪选项类型都存在，则基于配置和可用IOAM的
可用实现的每个IOAM传输节点填充了预先分配的或增量跟踪选项类型的IOAM跟踪数
据，但不是两者。传输节点必须忽略它不理解的IOam-
选项类型。Transit节点不得向数据包添加新的IOAM-Option-
Type，不得从数据包中删除IOAM-Option-
Types，并且不得更改IOAM边缘到边缘选项类型的IOAM-Data-
Fields。

  “IOAM Decaped节点”从数据包中删除IOAM-Option-
Type。

  封装，IOAM-Transit或Ioam解封节点的角色始终在特定的IOAM-
命名空间中执行。这意味着IOAM节点，例如，用于IOam-
命名空间“a”但不是ioam-
namespace“b”的IOam解封节点将只能从中删除ioam-
namespace“a”的ioam-option-
type包。请注意，这均匀适用于Noam-Option-
Types，即节点不理解，例如除上述四个以外的IOAM-选项类型，在将来的修订中
添加。位于IOAM域边缘的IOAM解封节点必须从数据包中删除所有IOAM-
NameSpaces的所有IOAM-选项类型和关联的封装头。

  IOAM-命名空间允许IOAM-Data-Fields的命名空间定义和解释。
接口ID可以例如指向物理接口（例如，要理解在接收或发送分组时使用哪个聚合链路的物
理接口），而在另一个情况下它可以参考逻辑接口（例如，隧道）。有关IOAM-
命名空间的详细信息，请参阅第5.3节。








Brockners, et al.         Expires April 6, 2022                 [Page 8]

Internet-Draft           In-situ OAM Data Fields            October 2021

5.3。IOam-namespaces.

  IOAM-命名空间可以与子集或所有IOAM-Option-
Types及其相应的IOAM数据字段相关联。IOAM-命名空间为IOAM-
Option-Types和关联的IOAM-Data-
Fields添加了进一步的上下文。无论IOAM-命名空间的值如何，IOAM-
Option-
Type和关联的IOAM数据字段都被解释为如本文档中所定义的。但是，IOAM-命
名空间为组节点提供了一种方法来支持IOam的不同部署方法（请参阅下面的一些示例使
用情况）。IOAM-Namespaces还有助于解决可能由于IOAM-Data-
Fields而不是全局唯一的字段发生的潜在问题（例如，IOAM节点标识符不必是全
局唯一的）。IOAM-Data-Fields的意义始终在特定的IOAM-
命名空间中。鉴于IOAM-Data-
Fields始终解释了特定命名空间的上下文，Namespace-
ID字段始终需要与IOAM数据字段本身一起携带。

  IOam-命名空间由16位命名空间标识符（命名空间ID）标识。IOAM-
命名空间字段包含在本文档中定义的所有IOAM-Option-
Type中，并且必须包含在所有将来的IOAM-Option-
Types中。命名空间ID值分为两个子范围：

  o操作员分配的范围从0x0001到0x7FFF

  o IANA分配的范围从0x8000到0xffff

  IANA分配的范围旨在允许将来的扩展具有新的和可互操作的IOAM功能，而操作
员分配的范围旨在是特定于域的，并由网络运算符管理。0x0000的命名空间ID值是
“default-namespace-id”。默认命名空间ID表示没有特定的命名
空间与数据包中的IOAM数据字段关联。必须由实现IOAM的所有节点支持默认命名空
间ID。默认命名空间-ID的用例是部署，该部署不会为其携带IOAM数据字段的某些
或全部数据包利用特定名称空间。

  命名空间标识符允许IOam能够确定的设备：

  o是否通过设备处理IOAM-Option-Type：如果数据包中包含的命名空
间ID与任何命名空间ID不匹配，则该节点被配置为操作以进行操作，则节点不得更改内
容IOam-Data-Fields。





Brockners, et al.         Expires April 6, 2022                 [Page 9]

Internet-Draft           In-situ OAM Data Fields            October 2021

  o如果在数据包中存在多种IOAM-Option-
Type，则需要处理/更新其中的IOam-Option-yex。在重叠IOAM-
域或在分层IOAM部署的情况下，可以在数据包中存在多个IOAM-Option-
in。

  o是否必须从数据包中删除IOAM-选项类型，例如，在域边缘或域边界处。

  Ioam-namespaces支持几种不同的用途：

  操作员可以使用IOam-命名空间来区分不同的操作域。域边的设备可以在命名空间
ID上过滤，以提供适当的IOAM域隔离。

  o Ioam-namespaces为ioam-data-
fields提供了其他上下文，因此可用于确保IOAM-Data-Fields是唯
一的，并由管理站或网络控制器正确解释。例如，节点标识符字段（node_id，见下
文）不需要在部署中是唯一的（例如，如果运算符希望为不同的IOAM层使用不同的节点
标识符，即使在同一设备内）;或节点标识符可能不是对于其他组织原因是唯一的，例如在
合并两个以前分隔的组织之后），命名空间ID可以用作上下文标识符，使得Node_I
D和命名空间ID的组合将始终是唯一的。同样，IOAM-
命名空间可用于定义某些IOam-Data-Fields如何解释：IOAM提供三种
不同的时间戳格式选项。命名空间ID可用于确定时间戳格式。在IOAM-
命名空间的上下文中，不具有关联的单元的IOAM数据 -
字段（例如，缓冲区占用率）。

  o Ioam-命名空间可用于在部署中识别不同的设备集（例如，不同类型的设备）
：如果操作员希望基于设备插入不同的IOAM数据字段，则设备可以将设备分组为多个I
OAM - 符号空间。这可能是由于IOAM功能集不同集合在不同的设备之间，或者由
于数据包标题中的优化空间使用的原因可能是可能的。它还可以源于可以添加和处理的跟踪
数据大小的硬件或操作限制，防止为流程收集完整迹线。

  *将不同的IOAM命名空间ID分配给不同的节点或网络分区集，并使用命名空间I
D作为IOAM封装节点的选择器，可以通过不同分组中的部分跟踪来收集和构造流的完整
跟踪流动。示例：操作员可以



Brockners, et al.         Expires April 6, 2022                [Page 10]

Internet-Draft           In-situ OAM Data Fields            October 2021

  选择将域的设备分为两个IOam-命名空间，以平均只有每个设备都会记录每个第二
跳。要检索部署的完整视图，需要关联两个IOam-命名空间的捕获的IOAM-
Data-excess。

*将不同的IOAM命名空间ID分配给不同的节点或网络分区集，并使用每个命名空间-
id的IOAM-Option-
Type的单独实例，可以通过来自每个IOam的部分迹线来收集和构造流的完整跟踪-
Option-type在流程中的每个数据包中。示例：操作员可以选择将域的设备分组
为两个IOAM-命名空间，以某种方式由数据包中的两个IOAM-Option-
Type之一表示。每个节点将仅记录它所属的IOAM-
命名空间的数据，以其忽略它不属于的IOam-命名空间的其他IOAM-
Option-type。要检索部署的完整视图，需要关联两个IOAM-
命名空间的捕获的IOAM-Data-excess。

5.4。IOAM跟踪选项类型

  “IOAM跟踪数据”预计将在每个IOAM传输节点上收集数据包遍历以确保在IO
AM域中的数据包中的整个路径中的可见性。即，在典型的部署中，IOAM域中的所有节
点都将参与IOAM，因此是IOAM传输节点，IOAM封装或IOAM解封装节点。如
果不是域中的所有节点都支持此文档中定义的IOAM功能，则只能在支持此文档中定义的
IOAM功能的那些节点上收集IOAM跟踪信息（即节点数据，见下文）。不支持此文档
中定义的IOAM功能的节点将转发数据包，而不会对IOAM数据字段进行任何更改。假
设已知IOAM域的最大跳数和最小路径MTU。溢出指示符（O-BIT）被定义为处理
PMTU低估的情况的方法之一，即ioam能够超过数据包中的可用空间的跳数。

  为了优化硬件和软件实现，IOAM跟踪定义为两个单独的选项。部署可以选择配置和
支持以下一个或两个选项。

  Pre-allocated Trace-Option : 此跟踪选项被定义为
节点数据字段的容器（见下文），其中每个节点的预先分配空间填充其信息。此选项对于实
现将空间分配一次和索引到数组中的竞争才有用，以便在运输过程中填充数据



Brockners, et al.         Expires April 6, 2022                [Page 11]

Internet-Draft           In-situ OAM Data Fields            October 2021

  （例如，软件货运代理经常陷入此类）。
IOAM封装节点为数据包中的预先分配跟踪选项分配空间，并在此IOam-
选项类型中设置相应的字段。 IOAM封装节点分配了一个数组，该数组用于存储从每个
节点检索的操作数据，而分组遍历域。 IOam Transit节点更新数组的内容，
并可能更新外标的校验和。指向IOAM跟踪数据的一部分的指针，指向阵列中的下一个空
插槽。更新预先分配选项内容的IOAM
Transit节点也会更新指针的值，该值指定下一个IOam Transit节点填
写其数据的位置。数据包中的“节点数据列表”阵列（下面请参阅下面），因为数据包遍历
网络，从阵列的最后一个条目开始，即“节点数据列表[n]”是要填充的第一个条目，“
节点数据列表[n-1]”是第二个等。

  Incremental Trace-Option : 此跟踪选项被定义为节点
数据字段的容器，其中每个节点在选项标题之后立即配置并按下其节点数据。这种类型的跟
踪记录对于一些硬件实现是有用的，因为它消除了传输网络元件的需要在选项中读取完整阵
列，并且允许任意长的数据包作为MTU允许。IOAM封装节点为增量跟踪选项类型分配
空间。基于操作状态和配置，IOAM封装节点在选项类型中设置控制必须收集IOAM-
Data-entions的选项类型的字段以及节点数据列表如何增长。IOAM传输节
点将其节点数据推向经过封装层的任何协议约束的节点数据列表。然后，它们会降低可用于
后续节点的剩余长度，并在外标题中调整长度并可能校验。

  IOAM封装支持跟踪的节点和IOAM解封装的节点必须支持跟踪选项类型。对于I
OAM传输节点，它足以支持其中一个跟踪选项类型。如果同时在部署中使用两个选项，则
必须在预先分配的跟踪选项之前放置增量跟踪选项。部署具有增量跟踪选项或预先分配的跟
踪选项的设备可以导致数据包中存在的两个选项类型。鉴于操作员知道哪些设备部署在特定
的IOAM域中，运算符将通过配置跟踪选项的类型的配置来决定，将用于特定域。

  每个节点数据条目都保存由数据包遍历的特定IOam传输节点的信息。IOAM
Depapsulate节点



Brockners, et al.         Expires April 6, 2022                [Page 12]

Internet-Draft           In-situ OAM Data Fields            October 2021

  删除IOAM-Option-
Type（s）和进程和/或导出相关数据。与所有IOAM-Data-
Fields一样，IOAM-Trace-Option-Type的IOAM-
Data-Fields在IOam-命名空间的上下文中定义。

  IOAM跟踪可以收集以下类型的信息：

  o识别IOAM节点。IOAM节点标识符可以匹配到设备内的设备标识符或特定控制
点或子系统。

  o识别在Ingress接口上接收到分组的界面。

  o识别分组被发送的界面，即出口接口。

  o节点处理数据包以及传输延迟时的时间。处理时间的不同定义是可行和预期的，但重
要的是，原位OAM域的所有设备都遵循相同的定义。

  o Generic data :
无格式信息，其中信息的语法和语义由操作员在特定部署中定义。对于特定的IOAM-命
名空间，所有IOAM节点都必须同样地解释通用数据。通用IOAM数据的示例包括地理
位置信息（在处理数据包时节点的位置），缓冲区队列填充水平或缓存填充水平在处理数据
包时，甚至电池充电水平。

  o检测是否在每个跳转中添加IOAM跟踪数据的信息，或者域中的某些跳数是否没有
ioam传输节点。

  应当注意，下面定义的一些节点数据字段的语义（例如队列深度和缓冲区占用）是特定
的。这种方法旨在允许具有各种不同架构的IOAM节点。

5.4.1。预先分配和增量跟踪选项类型

  IOAM预先分配的跟踪选项和IOAM增量跟踪选项具有类似的格式。除了下面的说
明，两个跟踪选项的内部格式和字段是相同的。两条跟踪选项都包含一个固定大小的“跟踪
选项标题”和一个存储收集数据的变量数据空间，“节点数据列表”。IOam
Transit节点（不是IOAM封装节点或IOAM



Brockners, et al.         Expires April 6, 2022                [Page 13]

Internet-Draft           In-situ OAM Data Fields            October 2021

  解封装节点）不得修改固定大小“跟踪选项标题”中的任何字段，除“标志”和“Re
mainingLen”之外，即，IOam
Transit节点不得修改命名空间ID，Nodelen，IOAM-Trace-
类型或保留字段。

  预先分配和增量跟踪选项标题：

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |        Namespace-ID           |NodeLen  | Flags | RemainingLen|
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |               IOAM-Trace-Type                 |  Reserved     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

  跟踪选项数据必须为4八位字节对齐：

   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<-+
   |                                                               |  |
   |                        node data list [0]                     |  |
   |                                                               |  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  D
   |                                                               |  a
   |                        node data list [1]                     |  t
   |                                                               |  a
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   ~                             ...                               ~  S
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  p
   |                                                               |  a
   |                        node data list [n-1]                   |  c
   |                                                               |  e
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  |
   |                                                               |  |
   |                        node data list [n]                     |  |
   |                                                               |  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<-+



  Namespace-ID : IOAM-
命名空间的16位标识符。命名空间ID值为0x0000被定义为“default-
namespace-id”（参见第5.3节），并且必须以实现IOAM的所有节点已
知。对于与任何不匹配的任何其他命名空间-D-ID的任何其他命名空间-
ID，该节点将被配置为操作，则不得更改IOAM-Data-entions的内容。





Brockners, et al.         Expires April 6, 2022                [Page 14]

Internet-Draft           In-situ OAM Data Fields            October 2021

  NodeLen : 5位无符号整数。此字段指定每个节点添加的数据长度为4个八
位字节的倍数，排除了“不透明状态快照”字段的长度。

  如果未设置IOam-Trace型位22，则Nodelen指定每个节点添加的实
际长度。如果设置了IOam-Trace型位22，则通过节点添加的实际长度将是4个
八位字节单元中的“不透明状态快照”字段的点亮长度。

  例如，如果设置了3个IOam-Trace型位，并且均未以宽格式，那么Node
len将为3.如果设置3个IOam-
Trace型位，并且其中2个宽，则Nodelen将为5。

  IOAM封装节点必须设置Nodelen。

  接收IOAM预先分配或增量跟踪选项的节点依赖于Nodelen值。

标志4位字段。标志由IANA分配，如8.3节所述。此文档分配单个标志，如下所示：

  位0“溢出”（O-BIT）（最有效位）。在网络元件应该将节点数据添加到数据包
的情况下，但是检测到没有足够的八位字节留下录制节点数据，网络元件不得添加任何字段
，并且必须将溢出“O位”设置为“1“在IOam-Trace-
Option标头中。这对于传输节点非常有用，以忽略该选项的进一步处理。

  RemainingLen : 7位无符号整数。该字段指定在将节点数据列表被覆
盖之前，用于记录节点数据的4个八位字节的倍数中的数据空间。发件人必须分配Rema
intLen字段的初始值。发件人可以通过计算在超出PATH MTU（PMTU）之
前允许的节点数据字节的数量来计算RemaintLen字段的值，因为PMTU已知发
件人。后续节点可以在Remaindlen和Nodelen之间进行简单的比较，以及
如果适用的“不透明状态快照”的长度，以确定该节点是否可以添加数据。当添加节点数据
时，节点必须通过添加的数据量减少重复值。在预先分配的跟踪选项中，RemaintL
en用于导出数据空间中的偏移以记录节点数据元素。具体地，节点数据元素的记录将从4
个八位字节单元中的RemaintLen  -  Nodelen  - 尺寸（不透
明快照）开始。如果在预先分配的跟踪选项中的remaintLen超出了下层标题中指
定的选项的长度




Brockners, et al.         Expires April 6, 2022                [Page 15]

Internet-Draft           In-situ OAM Data Fields            October 2021

  （不在本文档的范围内），那么节点不得添加任何字段。

  IOAM-Trace-Type :
一个24位标识符，指定在该节点数据列表中使用的数据类型。

  IOam-Trace型值是一个位字段。在本文档中定义了以下位，详细介绍了第5
.4.2节中描述的每个位。包装每个节点数据元素中的数据字段的顺序遵循IOam-
Trace类型字段的位顺序，如下所示：

  设置时第0位（最高有效位），指示节点数据中的hop_lim和node_id（
短格式）的存在。

  第1位设置时，在节点数据中表示存在Ingress_If_ID和EIGRE_I
F_ID（短格式）。

  第2位设置时，表示节点数据中的时间戳秒。

  第3位设置时，表示节点数据中的时间戳分数。

  Bit 4设置时，表示节点数据中的传输延迟。

  第5位设置时，表示节点数据中的IOAM-
Namespace特定数据（短格式）。

  第6位设置时，表示节点数据中的队列深度。

  第7位设置时，表示校验和补码节点数据的存在。

  第8位设置时，在节点数据中以宽格式表示Hop_lim和node_id的存在。

  Bit 9设置时，表示节点数据中的宽格式的Ingress_if_ID和EIG
RE_IF_ID。

  第10位设置时，在节点数据中以宽格式表示IOAM-
Namespace特定数据。

  第11位设置时，表示节点数据中的缓冲区占用。




Brockners, et al.         Expires April 6, 2022                [Page 16]

Internet-Draft           In-situ OAM Data Fields            October 2021

  位12-21未定义。这些值可用于IOAM跟踪类型注册表中的将来分配（第8.2
节）。每个对应于这些位之一的未来节点数据字段必须长为4八位。IOAM封装节点必须
将每个未定义的位的值设置为0.如果IOAM传输节点接收到其中一个或多个设置为1的
一个或多个，则必须：

1.在上面定义的IOAM-Trace型位的节点数据字段之后，添加填充有保留值0x
FFFFFFFF的相应节点数据，使得该节点以4个八位字节为单位添加的节点数据等于
Nodelen，或者

2.不向数据包添加任何节点数据字段，即使对于上面定义的IOAM-
Trace型位也是如此。

  第22位设置时，表示存在可变长度不透明状态快照字段。

  Bit 23 Reserved :
在传输时必须设置为零并在收到后忽略。该位保留，以允许IOam-
Trace型位字段的未来扩展。

  第5.4.2节介绍了IOAM数据类型及其格式。在IOAM-
Domain中，这些位的可能组合使得可以通过配置旋钮限制为IOam-
Trace类型。

  Reserved :
8位。在传输时，IOAM封装节点必须将值设置为零。IOam
Transit节点必须忽略所接收的值。

  Node data List [n] :
可变长度字段。这是节点数据元素列表列表，其中每个节点数据元素的内容由IOam-
Trace类型确定。打包每个节点数据元素中的数据字段的顺序遵循IOam-Trac
e型字段的比特顺序。每个节点必须在接收到的节点数据元素前面的节点数据元素，使得发
送的节点数据列表以该节点的数据元素开头，作为列表中的第一个填充元素。此列表中的最
后一个节点数据元素是路径中第一个IOAM功能节点的节点数据。以这种方式填充节点数
据列表可确保节点数据列表的顺序对于增量和预先分配的跟踪选项是相同的。在预先分配的
跟踪选项中，RemaintLen中包含的索引标识要填充当前活动节点数据的偏移量。





Brockners, et al.         Expires April 6, 2022                [Page 17]

Internet-Draft           In-situ OAM Data Fields            October 2021

5.4.2。IOAM节点数据字段和相关格式

  所有IOAM数据字段必须是4八位字节对齐的。如果支持更新IOAM数据字段的节
点不能填充IOAM-Trace类型中的字段的值，则字段值必须设置为0xFFFFF
FF，用于4个八位字节字段或0xFFFFFFFFFFFFFFFF-
octet字段，指示未填充该值，除非在下面的字段描述中明确指定。

  下面定义的一些IOAM数据字段（例如接口标识符或IOAM-Namespace
特定数据）都以“短格式”以及“广泛格式”定义。“短格式”是指包含4个八位字节的I
OAM数据字段。“宽格式”是指包含8个八位字节的IOAM数据字段。使用“短格式”
或“宽格式”不是互斥的。部署可以选择利用两者。例如，Ingress_IF_ID_
（短格式）可以是物理接口的标识符，而Ingress_IF_ID_（宽格式）可以是
该物理接口的逻辑子接口的标识符。

  每个IOAM数据字段的数据字段和关联数据类型都在以下部分中指定。IOAM-
Data-Fields的定义侧重于数据字段的语法，并避免指定可行的语义。这就是为
什么没有为数据字段定义单位的原因，例如“缓冲区占用”或“队列深度”。通过这种方法
，节点可以以其本机格式提供信息，并且不需要执行单位或格式转换。进一步处理IOAM
信息的系统，例如网络管理系统，也被假定还处理单位转换作为其IOAM数据字段处理的
一部分。特定数据字段和命名空间-D的组合提供了适当地解释提供的数据的上下文。

5.4.2.1。hop_lim和node_id短格式

  “hop_lim和node_id
short格式”字段是一个4个八位字节字段，如下所示：

    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |   Hop_Lim     |              node_id                          |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

  Hop_Lim : 1-octet无符号整数。它被设置为从记录此数据的节点的
出口中的数据包中的跳跃限制值。跳跃限制信息用于标识通信路径中节点的位置。这是从下
层复制的，例如，ipv6标题中的IPv4报头或跳跃限制字段中的TTL值。



Brockners, et al.         Expires April 6, 2022                [Page 18]

Internet-Draft           In-situ OAM Data Fields            October 2021

  数据包准备好进行传输时的数据包。Hop_lim字段的语义取决于IOAM封装到
的下层协议，因此其特定的语义在此备忘录的范围之外。当较低级别没有TTL /
Hop限制等效字段时，必须将此字段的值设置为0xFF。

  node_id :
3个八位字节无符号整数。节点标识符字段以唯一标识IOAM-命名空间和关联的IOA
M域中的节点。分配，管理和映射node_ids的过程超出了本文档的范围。请参阅[
i-d.brockers-opsawg-ioam-
deployment]，用于讨论node_id的部署相关方面。

5.4.2.2。INGRESS_IF_ID和EIGRE_IF_ID.

  “Ingress_If_ID和EIGRE_IF_ID”字段是一个4个八位字节
字段，如下所示：

    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |     ingress_if_id             |         egress_if_id          |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

  ingress_if_id :
2-octet无符号整数。接口标识符要记录的入口接口已接收到数据包。

  egress_if_id :
2-octet无符号整数。接口标识符要记录出口接口的报文被转发出来。

  请注意，由于IOAM使用自己的IOAM-NameSpaces for
Ioam-Data-Fields，因此可以以灵活的方式使用与接口标识符等的数据字
段来表示与进出口或出口数据包相关联的系统资源，即INGress_IF_ID可能代
表物理接口，虚拟或逻辑接口，甚至是队列。

5.4.2.3。时间戳秒

  “时间戳秒”字段是一个4个八位字节的无符号整数字段。它包含绝对时间戳以秒为单
位，指定节点收到数据包的时间。该字段有三种可能的格式;基于PTP（参见例如[RF
C8877]），NTP [RFC5905]或POSIX [POSIX]。在第6节
中指定了三个时间戳格式。在所有三种情况下，时间戳秒字段包含在第6节中指定的时间戳
格式的32个最高有效位。如果节点无法填充此字段，则会分配值0xFFFFFFFF。
注意



Brockners, et al.         Expires April 6, 2022                [Page 19]

Internet-Draft           In-situ OAM Data Fields            October 2021

  这是一个合理的价值，在大约136年内有效期为1秒;分析仪必须将若干数据包相关
联，或将时间戳值与其当前时间进行比较，以便检测错误指示。

5.4.2.4。时间戳分数

  “时间戳分数”字段是一个4个八位字节的无符号整数字段。分数指定自NTP
epoch [RFC8877]以来秒数的分数部分[RFC8877]。该字段指定节
点接收数据包的时间。该字段有三种可能的格式;基于PTP（参见例如[RFC8877
]），NTP [RFC5905]或POSIX [POSIX]。在第6节中指定了三
个时间戳格式。在所有三种情况下，时间戳分数字段包含在第6节中指定的时间戳格式的3
2个最低有效位。如果节点无法填充此字段，则会分配值0xFFFFFFFF。请注意，
这是NTP格式的合法值，每秒都有约233皮秒。如果使用NTP格式，则分析器必须关
联多个数据包以检测错误指示。

5.4.2.5。过境延误

  “传输延迟”字段是0到2 ^ 31-1范围内的4个八位字节无符号整数。它是纳
秒中的时间在传输节点中花费的数据包。这可以用作节点排队延迟的指示。如果传输延迟超
过2 ^ 31-1纳秒，则将顶部位'O'设置为指示溢出和值设置为0x800000
00。当此字段是数据字段的一部分，但填充字段的节点无法填充它，字段中的字段位置必
须填充值0xFFFFFFFF至均不填充。

    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |O|                     transit delay                           |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

5.4.2.6。命名空间特定数据

“命名空间特定数据”字段是一个4个八位字节字段，可以由节点使用以添加IOAM-
命名空间特定数据。这表示“自由格式”4-Ottet位字段，其语义在特定IOam-
命名空间的上下文中定义。







Brockners, et al.         Expires April 6, 2022                [Page 20]

Internet-Draft           In-situ OAM Data Fields            October 2021


    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                    namespace specific data                    |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

5.4.2.7。队列深度

  “队列深度”字段是4个八位字节的无符号整数字段。此字段表示从分组被转发的界面
的出口接口队列的当前长度。队列深度表示为队列使用的当前存储器缓冲区（数据包可能会
消耗一个或多个内存缓冲区，具体取决于其大小）。

    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                       queue depth                             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

5.4.2.8。校验和补充

  “校验和补充”字段是4八位字节节点数据，其包含4个八位字节校验和互补字段。当
使用vxlan-
gpe或geneve等封装时，校验和补充是有用的，当使用vxlan-gpe或ge
neve等封装。如果没有校验和补充，节点添加IOAM节点数据在封装协议的推荐后更
新UDP校验和字段。当存在校验和补充时，IOAM封装节点或IOAM传输节点添加节
点数据必须执行以下两个备选方案之一，以便保持UDP校验和值的正确性：

1.重新计算UDP校验和字段。

2.使用校验和补充在UDP有效载荷中进行校验和中性更新;校验和补充被分配一个值，
该值符合当前节点添加的节点数据字段的其余部分，从而导致现有的UDP校验和字段保持
正确。

  ioam Decapeulate节点必须重新计算UDP校验和字段，因为它们不
知道以前的跳是否修改了UDP校验和字段或校验和补充字段。

  校验和互补字段以与[RFC7820]和[RFC7821]类似的方式使用。





Brockners, et al.         Expires April 6, 2022                [Page 21]

Internet-Draft           In-situ OAM Data Fields            October 2021


    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                   Checksum Complement                         |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

5.4.2.9。hop_lim和node_id宽

  “hop_lim和node_id宽”字段是一个8 octet字段，如下所示：

    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |   Hop_Lim     |              node_id                          ~
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   ~                         node_id (contd)                       |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

  Hop_Lim :
1-octet无符号整数。有关字段的定义，请参见第5.4.2.1节。

  node_id :
7-octet无符号整数。节点标识符字段以唯一标识IOAM-命名空间和关联的IO
AM域中的节点。分配，管理和映射node_ids的过程超出了本文档的范围。

5.4.2.10。INGRESS_IF_ID和EIGRE_IF_ID宽

  “Ingress_if_ID和EIGRE_IF_ID宽”字段是一个8个八位字
节字段，如下所示：

    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                       ingress_if_id                           |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                       egress_if_id                            |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

  ingress_if_id :
4个八位字节无符号整数。接口标识符要记录的入口接口已接收到数据包。

  egress_if_id :
4个八位字节无符号整数。接口标识符要记录出口接口的报文被转发出来。

5.4.2.11。命名空间特定数据宽

  “命名空间特定的数据范围”字段是一个8个八位字节字段，可以由节点使用以添加I
OAM-Namespace特定数据。这个




Brockners, et al.         Expires April 6, 2022                [Page 22]

Internet-Draft           In-situ OAM Data Fields            October 2021

  表示“自由格式”8-OCTET位字段，其语义在特定IOAM-
命名空间的上下文中定义。

    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                    namespace specific data                    ~
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   ~                namespace specific data (contd)                |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

5.4.2.12。缓冲占用

  “缓冲区占用”字段是一个4个八位字节的无符号整数字段。此字段表示一组队列使用
的公共缓冲池的占用的当前状态。该字段的单位是特定的实现。因此，如果使用，则该单元
被解释在IOAM-命名空间和/或节点ID的上下文中。作者承认，在某些操作情况下，
需要在通过网络的数据包路径上保持一致，因此建议使用标准单位（如字节）的实现。

    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                       buffer occupancy                        |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

5.4.2.13。不透明状态快照

  “不透明状态快照”是可变长度字段，然后遵循上面定义的固定长度IOAM-
Data-entions。它允许网络元件在没有预定义模式的情况下在节点数据字段中
存储任意状态。模式将在IOAM-命名空间的上下文中定义。通过一些带外机制，需要通
过分析仪来了解模式。该机制的规范超出了本文档的范围。在IOAM-命名空间的上下文
中解释的24位“架构ID”字段表示使用了哪些特定模式，并且必须由运算符在网络元素
上配置。












Brockners, et al.         Expires April 6, 2022                [Page 23]

Internet-Draft           In-situ OAM Data Fields            October 2021


       0                   1                   2                   3
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |   Length      |                     Schema ID                 |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                                                               |
      |                                                               |
      |                        Opaque data                            |
      ~                                                               ~
      .                                                               .
      .                                                               .
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

  Length : 1-octet无符号整数。它是遵循架构ID的不透明数据字段
的4个八位字节的倍数的长度。

  Schema ID : 识别不透明数据架构的3个八位字节无符号整数。

  Opaque data :
可变长度字段。该字段由模式ID标识的模式指定解释。

  当此字段是数据字段的一部分，但填充字段的节点没有报告不透明状态数据，必须将长
度设置为0，并且必须将架构ID设置为0xFFFFFF表示没有模式。

5.4.3。IOAM节点数据的示例

  用于数据包的“节点数据列表”阵列中的条目的格式可以从数据包变化到数据包和部署
到部署“。某些部署可能只对录制节点标识符感兴趣，而其他部署可能有兴趣在录制节点标
识符和时间戳中感兴趣。本节提供“节点数据列表”的示例条目。

  0xD40000 : IOam-Trace型为0xD40000（0B1101
0100000000000000000000）然后节点数据的格式为：














Brockners, et al.         Expires April 6, 2022                [Page 24]

Internet-Draft           In-situ OAM Data Fields            October 2021


        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |   Hop_Lim     |              node_id                          |
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |     ingress_if_id             |         egress_if_id          |
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |                     timestamp fraction                        |
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |                    namespace specific data                    |
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+



  0xC00000 : IOam-Trace型为0xc00000（0b1100
000000000000000000000000）然后格式为：

        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |   Hop_Lim     |              node_id                          |
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |     ingress_if_id             |         egress_if_id          |
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

  0x900000 : IOam-Trace型为0x900000（0b1001
0000000000000000000000）然后格式为：

        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |   Hop_Lim     |              node_id                          |
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |                   timestamp fraction                          |
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

  0x840000 : IOam-Trace型为0x840000（0b1000
0100000000000000000000）然后格式为：

        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |   Hop_Lim     |              node_id                          |
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |                    namespace specific data                    |
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

  0x940000 : IOam-Trace型为0x940000（0b1001
0100000000000000000000）然后格式为：



Brockners, et al.         Expires April 6, 2022                [Page 25]

Internet-Draft           In-situ OAM Data Fields            October 2021


        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |   Hop_Lim     |              node_id                          |
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |                    timestamp fraction                         |
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |                    namespace specific data                    |
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

  0x308002 : Ioam-Trace型为0x308002（0b0011
0000100000000000000000000000000000000000
0000000000000000000000000000000000000000
0000000000000000000000000000000000000000
00000010）然后格式为：

        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |                      timestamp seconds                        |
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |                    timestamp fraction                         |
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |   Hop_Lim     |              node_id                          |
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |                         node_id(contd)                        |
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |   Length      |                     Schema Id                 |
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |                                                               |
       |                                                               |
       |                        Opaque data                            |
       ~                                                               ~
       .                                                               .
       .                                                               .
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

5.5。Ioam Transit Option-Type的证明

  IOam Transit Option-Type的证明用于支持路径或服务功能
链[RFC7665]验证用例。有关过境验证的更多信息，请参阅[I-D.IETF-
SFC-SPEDIT]。虽然在IOAM封装的IOAM数据如何处理IOAM数据如何
在IOAM封装时处理，但是，解封装和传输节点在文档的范围之外，所有这些方法都共享
唯一标识数据包以及迭代操作的必要性在从节点到节点的一组信息上。相应地，两条信息被
添加为数据包的IOAM数据字段：

  o PktID : 数据包的唯一标识符。



Brockners, et al.         Expires April 6, 2022                [Page 26]

Internet-Draft           In-situ OAM Data Fields            October 2021

  o Cumulative :
根据验证算法从节点传递给节点并由每个节点更新的信息。

  IOAM验证选项类型由固定大小的“IOAM证明”和“Transit
Option Reader”和“IOAM证明”：

  IOAM Transit Option标题证明：

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |       Namespace-ID            |IOAM POT Type  | IOAM POT flags|
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

  IOam Transit Option-Type IOAM-Data-
Fields的证明必须是4-octet对齐：

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |       POT Option data field determined by IOAM-POT-Type       |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+



  Namespace-ID : IOAM-
命名空间的16位标识符。命名空间ID值为0x0000被定义为“default-
namespace-id”（参见第5.3节），并且必须以实现IOAM的所有节点已
知。对于与任何不匹配的任何其他命名空间-D-ID的任何其他命名空间-
ID，该节点将被配置为操作，则不得更改IOAM-Data-entions的内容。

  IOAM POT Type :
特定POT变量的8位标识符，用于指定包括的POT数据。本文档定义了0型：

  0 :
POT数据是16个八位字节字段，以携带与盆栽程序相关的数据。[I-D.IETF-
SFC证明 -
过境证明]描述了锅的实施，并提供有关POT数据中携带的数据的详细信息。

  如果节点收到它不理解的IOAM
POT类型值，则该节点不得更改，添加到或删除OAM-Data-
Fields的内容。

  IOAM POT flags : 8位。定义了以下标志：




Brockners, et al.         Expires April 6, 2022                [Page 27]

Internet-Draft           In-situ OAM Data Fields            October 2021

  第0位“配置文件到使用”（p-bit）（最有效位）。对于使用最多两个配置文件
来驱动计算的IOAM罐类型，指示使用哪种池型（有关详细信息，请参阅[I-D.IE
TF-SFC-SPEDIT-TRANSIT）。两个配置文件编号为0,1。该比特传
送了分布0或轮廓1是否用于计算累积。

  Bit 1-7 Undefined : 这些位可用于分配，请参见第8.5节。
尚未分配的位必须在传输时将其设置为零，并在收到后忽略。

  POT Option data : 可变长度字段。由IOam-
pot型确定的类型。

5.5.1。IOam途径型号0

  IOAM禁用IOAM锅类型0的证明0：

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |        Namespace-ID           |IOAM POT Type=0|P|R R R R R R R|
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<-+
   |                        PktID                                  |  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  P
   |                        PktID (contd)                          |  O
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  T
   |                        Cumulative                             |  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  |
   |                        Cumulative (contd)                     |  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<-+



  Namespace-ID : IOam-
命名空间的16位标识符（参见上面的第5.5节）。

  IOAM POT Type : 特定POT变量的8位标识符，指定包含的POT
数据（参见上面的第5.5节）。在此，这里，IOam POT类型设置为值0。

  Bit 0 :
1位。“个人资料与使用”（p-bit）（最高有效位），请参见上面的第5.5节。

  Bit 1-7 : 未定义（见上文第5.5节）。

  PktID : 64位数据包标识符。




Brockners, et al.         Expires April 6, 2022                [Page 28]

Internet-Draft           In-situ OAM Data Fields            October 2021

  Cumulative :
通过每个分组PKTID字段和已配置的参数处理在特定节点上更新64位累积。

  Note : 较大或更小的“PKTID”和“累积”数据是可行的，并且可以在某
些部署方面，例如，如果在使用的封装协议中的空间约束的情况下，则可能需要。未来的文
件可以引入不同大小的“过境证明”数据。

5.6。IOAM边缘到边缘选项类型

  IOAM边缘到边缘选项类型是携带IOAM封装节点添加的数据，并由IOAM解封
节点解释。IOAM传输节点可以处理数据但不得修改它。

  IOAM边缘到边缘选项类型由固定大小的“IOAM边缘到边缘选项类型标题”和“
IOAM边缘到边缘选项类型数据字段”组成：

  IOAM边缘到边缘选项类型标题：

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |        Namespace-ID           |         IOAM-E2E-Type         |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

  IOAM边缘到边缘选项类型IOAM-Data-
Fields必须是4-octet对齐：

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |       E2E Option data field determined by IOAM-E2E-Type       |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

  Namespace-ID : IOAM-
命名空间的16位标识符。命名空间ID值为0x0000被定义为“default-
namespace-id”（参见第5.3节），并且必须以实现IOAM的所有节点已
知。对于与任何不匹配的任何其他命名空间-D-
ID的任何其他命名空间ID值，该节点被配置为运行，则节点不得更改IOAM-
Data-entims的内容。

  IOAM-E2E-Type :
一个16位标识符，它指定E2E选项数据中使用的数据类型。IOam-e2e型值有点




Brockners, et al.         Expires April 6, 2022                [Page 29]

Internet-Draft           In-situ OAM Data Fields            October 2021

  场地。包装E2E选项数据字段元素的顺序遵循IOAM-E2E类型字段的位顺序，
如下所示：

  当设置时，位0（大大有效位）指示添加到特定的“分组组”的64位序列号，用于检
测该组内的分组丢失，分组重新排序或分组复制。“分组组”依赖于部署，并在IOAM封
装节点上定义，例如，通过基于N组的数据包分类。设置该位时，“位1”（对于32位序
列号，见下文）必须为零。

  当设置时，位1指示添加到特定的“分组组”的32位序列号的存在，其用于检测该组
内的分组丢失，分组重新排序或分组复制。“分组组”依赖于部署，并在IOAM封装节点
上定义，例如，通过基于N组的数据包分类。设置该位时，“位0”（对于64位序列号，
见上文）必须为零。

  位2设置时表示存在时间戳秒，表示数据包输入了IOAM域的时间。在IOAM封装
节点中，检索时间戳的时间可以取决于实现。一些可能性是：1）节点接收的时间，2）在
使用隧道封装时，节点3）通过节点发送的时间，分组封装到隧道封装时隧道。每个实现都
必须在检索要放入数据包中的E2E时间戳时记录。这个4八位字段有三种可能的格式;基
于PTP（参见例如[RFC8877]），NTP [RFC5905]或POSIX 
[POSIX]。在第6节中指定了三个时间戳格式。在所有三种情况下，时间戳秒字段包
含在第6节中指定的时间戳格式的32个最高有效位。如果节点无法填充此字段，则会分配
值0xFFFFFFFF。请注意，这是一个合理的值，在大约136年内有效期为1秒;
分析仪必须将若干数据包相关联，或将时间戳值与其当前时间进行比较，以便检测错误指示
。

  设置时第3位表示存在时间戳分数的存在，表示数据包输入的IOAM域的时间。这个
4八位字段有三个可能的



Brockners, et al.         Expires April 6, 2022                [Page 30]

Internet-Draft           In-situ OAM Data Fields            October 2021

  格式;基于PTP（参见例如[RFC8877]），NTP
[RFC5905]或POSIX [POSIX]。在第6节中指定了三个时间戳格式。
在所有三种情况下，时间戳分数字段包含在第6节中指定的时间戳格式的32个最低有效位
。如果节点无法填充此字段，则会分配值0xFFFFFFFF。请注意，这是NTP格式
的合法值，每秒都有约233皮秒。如果使用NTP格式，则分析器必须关联多个数据包以
检测错误指示。

  位4-15未定义。在收到时，IOAM封装节点必须将这些位的值设置为零至零。

  E2E Option data :
可变长度字段。由IOam-E2E型确定的类型。

6.时间戳格式

  IOAM数据字段包括时间戳字段，其以三种可能的时间戳格式中的一种表示。假设管
理平面负责确定使用哪个时间戳格式。

6.1。PTP截断的时间戳格式

  精度时间协议（PTP）使用80位时间戳格式。截断的时间戳格式是64位字段，它
是80位PTP时间戳的64个最低有效位。PTP截断格式在[RFC8877]的第4
.3节中指定，下面提出了详细信息，以便完整起见。


        0                   1                   2                   3
        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |                            Seconds                            |
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |                          Nanoseconds                          |
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

  Figure 1 : PTP截断的时间戳格式

